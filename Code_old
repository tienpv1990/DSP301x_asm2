import numpy as np
import pandas as pd
import os.path
try:
    # Sử dụng Pandas check sự tồn tại của file, nếu tồn tại file, dữ liệu của file được ghi lên mảng dữ liệu Data:
    print("{:-^100}".format(' KIỂM TRA FILE DATA LỚP HỌC '))
    name_file = str(input("Vui lòng nhập mã lớp học: ")) + ".txt"
    read_file = pd.read_csv("./Data/" + name_file, header = None, sep=" ") #Đưa mỗi dòng dữ liệu vào 1 ô dữ liệu trong DataFrame.
    Raw = read_file.values
    print("Mở mã lớp thành công")
    
    # Chuyển dữ liệu từ mảng Data sang list:
    lst_Raw = []
    for i in Raw:
        j = str(i).replace("['","").replace("']","")
        k = list(j.split(","))
        lst_Raw.append(k)
    
    # Từ list lst_Raw, tạo dataframe 2 cột: cột ID chứa ID của học viên, cột Poin chứa list điểm của học viên tương ứng.
    # Dataframe gồm 2 cột: cột 1 chứa ID học viên, cột 2 là list lưu điểm của học viên
    lst_ID = []
    lst_Poin = []
    for i in lst_Raw:
        lst_ID.append(str(i[0]))
        lst_Poin.append(str(i[1:]).replace("[","").replace("]",""))
    dict_data = {"ID": lst_ID, "Poin": lst_Poin}    
    np_Data= np.array(dict_data)
    pd_Data = pd.DataFrame(dict_data)
    
    #Tạo 1 dataframe mới từ pd_Data nhằm xác định các dòng dữ liệu bị lỗi.
    Analyz = pd.concat([pd_Data, pd_Data["ID"].str.len(), pd_Data["Poin"].str.count(","), pd_Data["ID"].str[0], pd_Data["ID"].str[1:]], axis = 1)
    
    #Đặt tên lại các cột của mảng dữ liệu Analyz
    Analyz.columns.values[2] = "Len_ID" #Xác định chiều dài của 1 ID học viên. ID hợp lệ có 9 ký tự
    Analyz.columns.values[3] = "Line" #Xác định số ký tự của cột Poin thuộc pd_Data, được tính bằng tổng các dấu ",". 1 ô thuộc cột Poin hợp lệ chứa 25 câu trả lời tương ứng với 24 đấu "," ngăn cách
    Analyz.columns.values[4] = "Left_ID" #Xác định ký tự đầu tiên của ID, ID hợp lệ chứa chữ "N" ở đầu
    Analyz.columns.values[5] = "Right_ID" #Xác định 8 ký tự sau của ID, ID hợp lệ có 8 ký tự sau là 8 con số.
    
    #Lấy dữ liệu không hợp lệ:
    #Lấy dữ liệu ID không đủ 9 ký tự
    ID_invalid_1 = Analyz[Analyz["Len_ID"] != 9]
    
    #Lấy dữ liệu ID không bắt đầu bằng chữ N
    ID_invalid_2 = Analyz[Analyz["Left_ID"] != "N"]
    
    #Lấy dữ liệu ID mà 8 ký tự sau không phải là số
    ID_invalid_3 = pd.DataFrame([], columns = Analyz.columns)
    for i in Analyz["Right_ID"]:
        try:
            check = int(i) + 1
        except:
            ID_invalid_3 = Analyz[Analyz["Right_ID"] == i] 
    
    #Gộp dữ liệu ID lỗi ở trên, cho vào 1 dataframe ID_invalid
    ID_invalid = pd.concat([ID_invalid_1, ID_invalid_2, ID_invalid_3], axis = 0)
    
    #Lấy dữ liệu dòng không chứa chính xác 26 ký tự
    line_invalid = Analyz[Analyz["Line"] != 24]
        
    #Tạo các list chứa dữ liệu ID lỗi và không đủ 26 ký tự.
    lst_ID_invalid = ID_invalid["ID"].values.tolist()
    lst_line_invalid = line_invalid["ID"].values.tolist()
    
    #Sử dụng left join mảng dữ liệu pd_data và invalid chứa ID của các dòng không hợp lệ, lọc lấy các dòng dữ liệu hợp lệ
    invalid_1 = pd.concat([ID_invalid, line_invalid], axis = 0)
    invalid = invalid_1["ID"]
    join_full = pd.merge(pd_Data, invalid, on = "ID", how = "left", indicator = True)
    join_filter = join_full[join_full["_merge"] != "both"] #Loại bỏ những line không hợp lệ, là những dòng thuộc 2 dataframe: invalid và pd_data
        
    #Tách dữ liệu từ cột "Poin" (đang trong 1 ô) thành 25 ô tương ứng từng câu trả lời.
    join_filter_1 = join_filter["Poin"].str.replace("'","")
    join_filter_2 = join_filter_1.str.split(", ", expand = True)
    data_valid = pd.concat([join_filter["ID"], join_filter_2], axis = 1)
    
    #Tạo dữ liệu 1 chiều chứa câu trả lời đúng:
    answer_key = "B,A,D,D,C,B,D,A,C,C,D,B,A,B,A,C,B,D,A,C,A,A,B,D,D"
    answer = list(answer_key.split(","))
        
    #Tạo dataframe ID học viên và từng câu hỏi của từng học viên:
    np_data_valid = data_valid.values #Tạo mảng dữ liệu từ dataframe data_valid
    lst_ID_valid = data_valid["ID"].values.tolist() #Tạo list chứa các ID thuộc dataframe data_valid
    lst_poin_valid = []
    for i in np_data_valid:
        b = []
        a = i[1:].tolist()
        for j in range(len(answer)):
            if a[j] == answer[j]:
                b.append(4)
            elif a[j] == "":
                b.append(0)
            else:
                b.append(-1)
        lst_poin_valid.append(b)
    pd_poin_valid = pd.DataFrame(lst_poin_valid)
    pd_ID_valid = data_valid["ID"].reset_index()
    ID_poin_valid = pd.concat([pd_ID_valid["ID"], pd_poin_valid], axis = 1)
    lst_Sum_poin = ID_poin_valid.values[:,1:].sum(axis = 1).tolist()
    data_sum_poin = pd.DataFrame({"ID": lst_ID_valid,
                                  "Sum_Poin": lst_Sum_poin}) 

    #Tạo dataframe thống kê số lượng câu trả lời sai và bị bỏ qua của 25 câu hỏi
    dict_statistic = {}
    lst_Ans = []
    lst_False = []
    lst_None = []
    df_0 = pd.DataFrame({"Type": ["False", "None", "True"]},
                            index = [-1,0,4])
    for i in range(1,26):
        df_1 = ID_poin_valid.iloc[:,[0,i]]
        df_2 = df_1.groupby(by = int(i-1)).count()
        df_3 = pd.concat([df_0, df_2], axis = 1)
        df_4 = df_3.fillna(0).reset_index()
        lst_Ans.append(i)
        lst_False.append(df_4.iloc[0,2])
        lst_None.append(df_4.iloc[1,2])
    dict_statistic["Ans"] = lst_Ans
    dict_statistic["False"] = lst_False
    dict_statistic["None"] = lst_None
    statistic = pd.DataFrame(dict_statistic)
    
    #Xác định câu hỏi bị bỏ qua nhiều nhất
    statistic_none = statistic[statistic["None"] == statistic["None"].max()].iloc[:,[0,2]]
        
    #Xác định câu hỏi trả lời sai nhiều nhất
    statistic_False = statistic[statistic["False"] == statistic["False"].max()].iloc[:,[0,1]]
        
    #THỐNG KÊ LỚP HỌC
    print("{:-^100}".format(' PHÂN TÍCH FILE MÃ LỚP '))
    if len(lst_Raw) == len(lst_ID_valid):
        print('Tất cả các dòng dữ liệu đều hợp lệ')
    else:
        for i in lst_Raw:
            if i[0] in lst_ID_invalid:
                print('- Dòng dữ liệu không hợp lệ: ID học viên không hợp lệ')
                print('  ' + str(i).replace("[","").replace("]","").replace("'",""))
            elif i[0] in lst_line_invalid:
                print('- Dòng dữ liệu không hợp lệ: không chứa đúng 26 giá trị:')
                print('  ' + str(i).replace("[","").replace("]","").replace("'",""))
    
    print("{:-^100}".format(' THỐNG KÊ FILE MÃ LỚP HỌC '))
    print('- Tổng số dòng dữ liệu hợp lệ: {}'.format(len(lst_ID_valid)))
    print('- Tổng số dòng dữ liệu không hợp lệ: {}'.format(len(lst_ID) - len(lst_ID_valid)))
    
    #THỐNG KÊ ĐIỂM LỚP HỌC
    print("{:-^100}".format(' THỐNG KÊ ĐIỂM LỚP HỌC '))
    print("- Số lượng học viên được điểm cao (>80): {}".format(data_sum_poin["ID"][data_sum_poin["Sum_Poin"] > 80].count()))
    print("- Điểm trung bình: {}".format(round(float(data_sum_poin["Sum_Poin"].mean()),3)))
    print("- Điểm cao nhất: {}".format(data_sum_poin["Sum_Poin"].max()))
    print("- Điểm thấp nhất: {}".format(data_sum_poin["Sum_Poin"].min()))
    print("- Miền giá trị của điểm: {}".format(data_sum_poin["Sum_Poin"].max() - data_sum_poin["Sum_Poin"].min()))
    print("- Giá trị trung vị: {}".format(round(float(data_sum_poin["Sum_Poin"].median()),3)))
    
    print("- Thống kê câu trả lời bị bỏ qua nhiều nhất:")
    print(" + Câu bị bỏ qua: {}".format(str(statistic_none["Ans"].values.tolist()).replace("[","").replace("]","")))
    print(" + Số lượng học viên bỏ qua: {}".format(int(statistic["None"].max())))
    print(" + Tỷ lệ bị bỏ qua: {}".format(round(statistic["None"].max()/len(lst_ID_valid) ,3)))
    
    print("- Thống kê câu bị trả lời sai nhiều nhất:")
    print(" + Câu trả lời sai: {}".format(str(statistic_False["Ans"].values.tolist()).replace("[","").replace("]","")))
    print(" + Số lượng học viên trả lời sai: {}".format(int(statistic["False"].max())))
    print(" + Tỷ lệ trả lời sai: {}".format(round(statistic["False"].max()/len(lst_ID_valid), 3)))
    
    #Ghi file điểm ra file mới.
    save_file = "./Output/" + "Done_" + name_file
    data_sum_poin.to_csv(save_file, index = False)

except FileNotFoundError:
    print("Mã lớp không tồn tại")  
